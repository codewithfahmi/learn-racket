#lang racket

(cons 3 4)
(cons #t "Lowry")
empty
(cons 3 empty)
(cons true (cons "blue" empty))
(cons (cons 1 (cons 2 empty)) (cons 3 (cons 4 empty)))
(car (cons 3 4))
(cdr (cons 3 4))
(first (cons true (cons "blue" empty)))
(rest (cons
       (cons (cons 1 (cons 2 empty))
             (cons 3 (cons 4 empty)))
       (cons 5 (cons 6 empty))))
(list (+ 1 2) (+ 3 4))
(third '(1 2 3 4 5))
(append '(1 2) '(3 4 5))
(list-ref '(1 2 3 4 5 6 7 8 9 10) 3)
(length '(1 2 3 4 5 6 7 8 9 10))
(take '(1 2 3 4 5 6 7 8 9 10) 3)
(drop '(1 2 3 4 5 6 7 8 9 10) 3)
(reverse '(1 2 3 4 5 6 7 8 9 10))
(quasiquote (1 2 ,(length '(1 2 3)) 4 5))
(substring "weather" 1 4)
(string-append "wee" "knights")
(string->list "turnip")
(list->string (reverse (string->list "pots")))
(struct bt (label left right) #:transparent)
(define tree (bt "root"
                 (bt "left child" empty empty)
                 (bt "right child" empty empty)))
(bt? tree)
(bt-label tree)
(bt-left tree)